{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","addTodo","useState","id","task","completed","todo","setTodo","onSubmit","e","preventDefault","uuidv4","TextField","label","name","type","value","onChange","target","Button","style","marginTop","Todo","toggleComplete","removeTodo","ListItem","display","Checkbox","checked","onClick","Typography","color","variant","textDecoration","IconButton","TodoList","todos","List","map","key","App","setTodos","useEffect","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","className","padding","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8TAuCeA,MAnCf,YAAgC,IAAZC,EAAW,EAAXA,QAAW,EAEHC,mBAAS,CAC7BC,GAAI,GACJC,KAAM,GACNC,WAAW,IALY,mBAEpBC,EAFoB,KAEdC,EAFc,KAqB3B,OACA,0BAAMC,SAVN,SAAsBC,GAClBA,EAAEC,iBACEJ,EAAKF,OACLH,EAAQ,2BAAKK,GAAN,IAAYH,GAAIQ,iBAEvBJ,EAAQ,2BAAKD,GAAN,IAAYF,KAAM,SAM7B,kBAACQ,EAAA,EAAD,CACIC,MAAM,OACNC,KAAK,OACLC,KAAK,OACLC,MAAOV,EAAKF,KACZa,SApBR,SAA+BR,GAC3BF,EAAQ,2BAAKD,GAAN,IAAYF,KAAMK,EAAES,OAAOF,YAqBlC,kBAACG,EAAA,EAAD,CAAQC,MAAO,CAAEC,UAAW,IAAMN,KAAK,UAAvC,Y,oDCCOO,MA9Bf,YAAqD,IAArChB,EAAoC,EAApCA,KAAMiB,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,WAUlC,OACA,kBAACC,EAAA,EAAD,CAAUL,MAAO,CAAEM,QAAS,SACxB,kBAACC,EAAA,EAAD,CACIZ,KAAK,WACLa,QAAStB,EAAKD,UACdwB,QAbR,WACIN,EAAejB,EAAKH,OAcpB,kBAAC2B,EAAA,EAAD,CACAC,MAAO,gBACPC,QAAQ,QACRZ,MAAO,CAAEa,eAAgB3B,EAAKD,UAAY,eAAiB,OACtDC,EAAKF,MAEV,kBAAC8B,EAAA,EAAD,CAAYL,QAjBhB,WACIL,EAAWlB,EAAKH,MAiBZ,kBAAC,IAAD,SCVGgC,MAff,YAA0D,IAAtCC,EAAqC,EAArCA,MAAOb,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,WACvC,OACI,kBAACa,EAAA,EAAD,KACKD,EAAME,KAAI,SAAAhC,GAAI,OACX,kBAAC,EAAD,CACIiC,IAAKjC,EAAKH,GACVG,KAAMA,EACNiB,eAAgBA,EAChBC,WAAYA,SC+CjBgB,MAnDf,WAAgB,IAAD,EACetC,mBAAS,IADxB,mBACJkC,EADI,KACGK,EADH,KAoCb,OAjCAC,qBAAU,WACR,IAAMC,EAAeC,KAAKC,MAAMC,aAAaC,QANvB,0BAOlBJ,GACFF,EAASE,KAEV,IAEHD,qBAAU,WACRI,aAAaE,QAbS,wBAakBJ,KAAKK,UAAUb,MACtD,CAACA,IAyBF,yBAAKc,UAAU,OACX,kBAACpB,EAAA,EAAD,CAAYE,QAAQ,KAAKZ,MAAO,CAAE+B,QAAS,KAA3C,cAGA,kBAAC,EAAD,CAAUlD,QA3Bd,SAAiBK,GACfmC,EAAS,CAACnC,GAAF,mBAAW8B,QA2BjB,kBAAC,EAAD,CACEA,MAAOA,EACPb,eA1BN,SAAwBpB,GACtBsC,EACEL,EAAME,KAAI,SAAAhC,GACR,OAAIA,EAAKH,KAAOA,EACP,2BACFG,GADL,IAEED,WAAYC,EAAKD,YAGdC,OAkBPkB,WAbN,SAAoBrB,GAClBsC,EAASL,EAAMgB,QAAO,SAAA9C,GAAI,OAAIA,EAAKH,KAAOA,WC7B5BkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.754166d4.chunk.js","sourcesContent":["import { Button, TextField } from '@material-ui/core'\r\nimport React, { useState } from 'react';\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\nfunction TodoForm({ addTodo }) {\r\n\r\n    const [todo, setTodo] = useState({\r\n        id: \"\",\r\n        task: \"\",\r\n        completed: false\r\n    });\r\n\r\n    function handleTaskInputChange(e) {\r\n        setTodo({ ...todo, task: e.target.value });\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        if (todo.task) {\r\n            addTodo({ ...todo, id: uuidv4() });\r\n            //reset task input\r\n            setTodo({ ...todo, task: \"\" });\r\n        }\r\n    }\r\n\r\n    return (\r\n    <form onSubmit={handleSubmit}>\r\n        <TextField\r\n            label=\"Task\"\r\n            name=\"task\"\r\n            type=\"text\"\r\n            value={todo.task}\r\n            onChange={handleTaskInputChange}\r\n        />\r\n        <Button style={{ marginTop: 10 }} type=\"submit\">submit</Button>\r\n    </form>\r\n    );\r\n}\r\n\r\nexport default TodoForm\r\n","import { Checkbox, IconButton, ListItem, Typography } from '@material-ui/core'\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport React from 'react'\r\nimport '../App.css'\r\n\r\nfunction Todo({ todo, toggleComplete, removeTodo }) {\r\n\r\n    function handleCheckboxClick() {\r\n        toggleComplete(todo.id);\r\n    }\r\n\r\n    function handleRemoveClick() {\r\n        removeTodo(todo.id);\r\n    }\r\n\r\n    return (\r\n    <ListItem style={{ display: \"flex\" }} >\r\n        <Checkbox\r\n            type=\"checkbox\" \r\n            checked={todo.completed} \r\n            onClick={handleCheckboxClick}\r\n        />\r\n        <Typography \r\n        color={\"textSecondary\"}\r\n        variant=\"body1\"\r\n        style={{ textDecoration: todo.completed ? \"line-through\" : null }}>\r\n            {todo.task}\r\n        </Typography>\r\n        <IconButton onClick={handleRemoveClick}>\r\n            <CloseIcon />\r\n        </IconButton>\r\n    </ListItem>\r\n    );\r\n}\r\n\r\nexport default Todo\r\n","import { List } from '@material-ui/core'\r\nimport React from 'react'\r\nimport Todo from './Todo'\r\n\r\nfunction TodoList({ todos, toggleComplete, removeTodo }) {\r\n    return (\r\n        <List>\r\n            {todos.map(todo => (\r\n                <Todo \r\n                    key={todo.id} \r\n                    todo={todo} \r\n                    toggleComplete={toggleComplete} \r\n                    removeTodo={removeTodo}\r\n                />\r\n            ))}\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import Typography from \"@material-ui/core/Typography\"\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport TodoForm from './components/TodoForm'\nimport TodoList from './components/TodoList'\n\nconst LOCAL_STORAGE_KEY = \"react-todo-list-todos\";\n\nfunction App() {\n    const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    const storageTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storageTodos) {\n      setTodos(storageTodos);\n    }\n  }, []);\n  \n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n  }, [todos])\n\n    function addTodo(todo) {\n      setTodos([todo, ...todos]);\n    }\n\n    function toggleComplete(id) {\n      setTodos(\n        todos.map(todo => {\n          if (todo.id === id) {\n            return {\n              ...todo,\n              completed: !todo.completed\n            };\n          }\n          return todo;\n        })\n      );\n    }\n\n    function removeTodo(id) {\n      setTodos(todos.filter(todo => todo.id !== id));\n    }\n\n  return (\n    <div className=\"App\">\n        <Typography variant=\"h3\" style={{ padding: 16 }}>\n          TO DO List\n        </Typography>\n        <TodoForm addTodo={addTodo}/>\n        <TodoList \n          todos={todos} \n          toggleComplete={toggleComplete}\n          removeTodo={removeTodo}  \n        />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}